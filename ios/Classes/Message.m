// Autogenerated from Pigeon (v4.0.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "Message.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString *, id> *wrapResult(id result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ?: [NSNull null]),
        @"message": (error.message ?: [NSNull null]),
        @"details": (error.details ?: [NSNull null]),
        };
  }
  return @{
      @"result": (result ?: [NSNull null]),
      @"error": errorDict,
      };
}
static id GetNullableObject(NSDictionary* dict, id key) {
  id result = dict[key];
  return (result == [NSNull null]) ? nil : result;
}
static id GetNullableObjectAtIndex(NSArray* array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}


@interface ObsRequest ()
+ (ObsRequest *)fromMap:(NSDictionary *)dict;
+ (nullable ObsRequest *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface ObsResponse ()
+ (ObsResponse *)fromMap:(NSDictionary *)dict;
+ (nullable ObsResponse *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end

@implementation ObsRequest
+ (instancetype)makeWithFilePath:(NSString *)filePath
    accessKey:(NSString *)accessKey
    secretKey:(NSString *)secretKey
    endpoint:(NSString *)endpoint
    bucket:(NSString *)bucket
    securityToken:(NSString *)securityToken
    prefix:(nullable NSString *)prefix
    fileName:(nullable NSString *)fileName {
  ObsRequest* pigeonResult = [[ObsRequest alloc] init];
  pigeonResult.filePath = filePath;
  pigeonResult.accessKey = accessKey;
  pigeonResult.secretKey = secretKey;
  pigeonResult.endpoint = endpoint;
  pigeonResult.bucket = bucket;
  pigeonResult.securityToken = securityToken;
  pigeonResult.prefix = prefix;
  pigeonResult.fileName = fileName;
  return pigeonResult;
}
+ (ObsRequest *)fromMap:(NSDictionary *)dict {
  ObsRequest *pigeonResult = [[ObsRequest alloc] init];
  pigeonResult.filePath = GetNullableObject(dict, @"filePath");
  NSAssert(pigeonResult.filePath != nil, @"");
  pigeonResult.accessKey = GetNullableObject(dict, @"accessKey");
  NSAssert(pigeonResult.accessKey != nil, @"");
  pigeonResult.secretKey = GetNullableObject(dict, @"secretKey");
  NSAssert(pigeonResult.secretKey != nil, @"");
  pigeonResult.endpoint = GetNullableObject(dict, @"endpoint");
  NSAssert(pigeonResult.endpoint != nil, @"");
  pigeonResult.bucket = GetNullableObject(dict, @"bucket");
  NSAssert(pigeonResult.bucket != nil, @"");
  pigeonResult.securityToken = GetNullableObject(dict, @"securityToken");
  NSAssert(pigeonResult.securityToken != nil, @"");
  pigeonResult.prefix = GetNullableObject(dict, @"prefix");
  pigeonResult.fileName = GetNullableObject(dict, @"fileName");
  return pigeonResult;
}
+ (nullable ObsRequest *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [ObsRequest fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"filePath" : (self.filePath ?: [NSNull null]),
    @"accessKey" : (self.accessKey ?: [NSNull null]),
    @"secretKey" : (self.secretKey ?: [NSNull null]),
    @"endpoint" : (self.endpoint ?: [NSNull null]),
    @"bucket" : (self.bucket ?: [NSNull null]),
    @"securityToken" : (self.securityToken ?: [NSNull null]),
    @"prefix" : (self.prefix ?: [NSNull null]),
    @"fileName" : (self.fileName ?: [NSNull null]),
  };
}
@end

@implementation ObsResponse
+ (instancetype)makeWithObjectUrl:(NSString *)objectUrl {
  ObsResponse* pigeonResult = [[ObsResponse alloc] init];
  pigeonResult.objectUrl = objectUrl;
  return pigeonResult;
}
+ (ObsResponse *)fromMap:(NSDictionary *)dict {
  ObsResponse *pigeonResult = [[ObsResponse alloc] init];
  pigeonResult.objectUrl = GetNullableObject(dict, @"objectUrl");
  NSAssert(pigeonResult.objectUrl != nil, @"");
  return pigeonResult;
}
+ (nullable ObsResponse *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [ObsResponse fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"objectUrl" : (self.objectUrl ?: [NSNull null]),
  };
}
@end

@interface ObsClientAPICodecReader : FlutterStandardReader
@end
@implementation ObsClientAPICodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [ObsRequest fromMap:[self readValue]];
    
    case 129:     
      return [ObsResponse fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface ObsClientAPICodecWriter : FlutterStandardWriter
@end
@implementation ObsClientAPICodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[ObsRequest class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[ObsResponse class]]) {
    [self writeByte:129];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface ObsClientAPICodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation ObsClientAPICodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[ObsClientAPICodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[ObsClientAPICodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *ObsClientAPIGetCodec() {
  static dispatch_once_t sPred = 0;
  static FlutterStandardMessageCodec *sSharedObject = nil;
  dispatch_once(&sPred, ^{
    ObsClientAPICodecReaderWriter *readerWriter = [[ObsClientAPICodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}


void ObsClientAPISetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<ObsClientAPI> *api) {
  {
    NSObject<FlutterTaskQueue> *taskQueue = [binaryMessenger makeBackgroundTaskQueue];
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ObsClientAPI.uploadFile"
        binaryMessenger:binaryMessenger
        codec:ObsClientAPIGetCodec()
        taskQueue:taskQueue];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(uploadFileRequest:error:)], @"ObsClientAPI api (%@) doesn't respond to @selector(uploadFileRequest:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        ObsRequest *arg_request = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        ObsResponse *output = [api uploadFileRequest:arg_request error:&error];
        callback(wrapResult(output, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
