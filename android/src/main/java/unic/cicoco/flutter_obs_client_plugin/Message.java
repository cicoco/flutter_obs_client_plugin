// Autogenerated from Pigeon (v4.0.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package unic.cicoco.flutter_obs_client_plugin;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class Message {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ObsRequest {
    private @NonNull String filePath;
    public @NonNull String getFilePath() { return filePath; }
    public void setFilePath(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"filePath\" is null.");
      }
      this.filePath = setterArg;
    }

    private @NonNull String accessKey;
    public @NonNull String getAccessKey() { return accessKey; }
    public void setAccessKey(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"accessKey\" is null.");
      }
      this.accessKey = setterArg;
    }

    private @NonNull String secretKey;
    public @NonNull String getSecretKey() { return secretKey; }
    public void setSecretKey(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"secretKey\" is null.");
      }
      this.secretKey = setterArg;
    }

    private @NonNull String endpoint;
    public @NonNull String getEndpoint() { return endpoint; }
    public void setEndpoint(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"endpoint\" is null.");
      }
      this.endpoint = setterArg;
    }

    private @NonNull String bucket;
    public @NonNull String getBucket() { return bucket; }
    public void setBucket(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"bucket\" is null.");
      }
      this.bucket = setterArg;
    }

    private @NonNull String securityToken;
    public @NonNull String getSecurityToken() { return securityToken; }
    public void setSecurityToken(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"securityToken\" is null.");
      }
      this.securityToken = setterArg;
    }

    private @Nullable String prefix;
    public @Nullable String getPrefix() { return prefix; }
    public void setPrefix(@Nullable String setterArg) {
      this.prefix = setterArg;
    }

    private @Nullable String fileName;
    public @Nullable String getFileName() { return fileName; }
    public void setFileName(@Nullable String setterArg) {
      this.fileName = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private ObsRequest() {}
    public static final class Builder {
      private @Nullable String filePath;
      public @NonNull Builder setFilePath(@NonNull String setterArg) {
        this.filePath = setterArg;
        return this;
      }
      private @Nullable String accessKey;
      public @NonNull Builder setAccessKey(@NonNull String setterArg) {
        this.accessKey = setterArg;
        return this;
      }
      private @Nullable String secretKey;
      public @NonNull Builder setSecretKey(@NonNull String setterArg) {
        this.secretKey = setterArg;
        return this;
      }
      private @Nullable String endpoint;
      public @NonNull Builder setEndpoint(@NonNull String setterArg) {
        this.endpoint = setterArg;
        return this;
      }
      private @Nullable String bucket;
      public @NonNull Builder setBucket(@NonNull String setterArg) {
        this.bucket = setterArg;
        return this;
      }
      private @Nullable String securityToken;
      public @NonNull Builder setSecurityToken(@NonNull String setterArg) {
        this.securityToken = setterArg;
        return this;
      }
      private @Nullable String prefix;
      public @NonNull Builder setPrefix(@Nullable String setterArg) {
        this.prefix = setterArg;
        return this;
      }
      private @Nullable String fileName;
      public @NonNull Builder setFileName(@Nullable String setterArg) {
        this.fileName = setterArg;
        return this;
      }
      public @NonNull ObsRequest build() {
        ObsRequest pigeonReturn = new ObsRequest();
        pigeonReturn.setFilePath(filePath);
        pigeonReturn.setAccessKey(accessKey);
        pigeonReturn.setSecretKey(secretKey);
        pigeonReturn.setEndpoint(endpoint);
        pigeonReturn.setBucket(bucket);
        pigeonReturn.setSecurityToken(securityToken);
        pigeonReturn.setPrefix(prefix);
        pigeonReturn.setFileName(fileName);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("filePath", filePath);
      toMapResult.put("accessKey", accessKey);
      toMapResult.put("secretKey", secretKey);
      toMapResult.put("endpoint", endpoint);
      toMapResult.put("bucket", bucket);
      toMapResult.put("securityToken", securityToken);
      toMapResult.put("prefix", prefix);
      toMapResult.put("fileName", fileName);
      return toMapResult;
    }
    static @NonNull ObsRequest fromMap(@NonNull Map<String, Object> map) {
      ObsRequest pigeonResult = new ObsRequest();
      Object filePath = map.get("filePath");
      pigeonResult.setFilePath((String)filePath);
      Object accessKey = map.get("accessKey");
      pigeonResult.setAccessKey((String)accessKey);
      Object secretKey = map.get("secretKey");
      pigeonResult.setSecretKey((String)secretKey);
      Object endpoint = map.get("endpoint");
      pigeonResult.setEndpoint((String)endpoint);
      Object bucket = map.get("bucket");
      pigeonResult.setBucket((String)bucket);
      Object securityToken = map.get("securityToken");
      pigeonResult.setSecurityToken((String)securityToken);
      Object prefix = map.get("prefix");
      pigeonResult.setPrefix((String)prefix);
      Object fileName = map.get("fileName");
      pigeonResult.setFileName((String)fileName);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ObsResponse {
    private @NonNull String objectUrl;
    public @NonNull String getObjectUrl() { return objectUrl; }
    public void setObjectUrl(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"objectUrl\" is null.");
      }
      this.objectUrl = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private ObsResponse() {}
    public static final class Builder {
      private @Nullable String objectUrl;
      public @NonNull Builder setObjectUrl(@NonNull String setterArg) {
        this.objectUrl = setterArg;
        return this;
      }
      public @NonNull ObsResponse build() {
        ObsResponse pigeonReturn = new ObsResponse();
        pigeonReturn.setObjectUrl(objectUrl);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("objectUrl", objectUrl);
      return toMapResult;
    }
    static @NonNull ObsResponse fromMap(@NonNull Map<String, Object> map) {
      ObsResponse pigeonResult = new ObsResponse();
      Object objectUrl = map.get("objectUrl");
      pigeonResult.setObjectUrl((String)objectUrl);
      return pigeonResult;
    }
  }
  private static class ObsClientAPICodec extends StandardMessageCodec {
    public static final ObsClientAPICodec INSTANCE = new ObsClientAPICodec();
    private ObsClientAPICodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return ObsRequest.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return ObsResponse.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof ObsRequest) {
        stream.write(128);
        writeValue(stream, ((ObsRequest) value).toMap());
      } else 
      if (value instanceof ObsResponse) {
        stream.write(129);
        writeValue(stream, ((ObsResponse) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface ObsClientAPI {
    @NonNull ObsResponse uploadFile(@NonNull ObsRequest request);

    /** The codec used by ObsClientAPI. */
    static MessageCodec<Object> getCodec() {
      return ObsClientAPICodec.INSTANCE;
    }

    /** Sets up an instance of `ObsClientAPI` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, ObsClientAPI api) {
      {
        BinaryMessenger.TaskQueue taskQueue = binaryMessenger.makeBackgroundTaskQueue();
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ObsClientAPI.uploadFile", getCodec(), taskQueue);
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              ObsRequest requestArg = (ObsRequest)args.get(0);
              if (requestArg == null) {
                throw new NullPointerException("requestArg unexpectedly null.");
              }
              ObsResponse output = api.uploadFile(requestArg);
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorMap;
  }
}
