// Autogenerated from Pigeon (v4.0.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import
import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

class ObsRequest {
  ObsRequest({
    required this.filePath,
    required this.accessKey,
    required this.secretKey,
    required this.endpoint,
    required this.bucket,
    required this.securityToken,
    this.prefix,
    this.fileName,
  });

  String filePath;
  String accessKey;
  String secretKey;
  String endpoint;
  String bucket;
  String securityToken;
  String? prefix;
  String? fileName;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['filePath'] = filePath;
    pigeonMap['accessKey'] = accessKey;
    pigeonMap['secretKey'] = secretKey;
    pigeonMap['endpoint'] = endpoint;
    pigeonMap['bucket'] = bucket;
    pigeonMap['securityToken'] = securityToken;
    pigeonMap['prefix'] = prefix;
    pigeonMap['fileName'] = fileName;
    return pigeonMap;
  }

  static ObsRequest decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return ObsRequest(
      filePath: pigeonMap['filePath']! as String,
      accessKey: pigeonMap['accessKey']! as String,
      secretKey: pigeonMap['secretKey']! as String,
      endpoint: pigeonMap['endpoint']! as String,
      bucket: pigeonMap['bucket']! as String,
      securityToken: pigeonMap['securityToken']! as String,
      prefix: pigeonMap['prefix'] as String?,
      fileName: pigeonMap['fileName'] as String?,
    );
  }
}

class ObsResponse {
  ObsResponse({
    required this.objectUrl,
  });

  String objectUrl;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['objectUrl'] = objectUrl;
    return pigeonMap;
  }

  static ObsResponse decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return ObsResponse(
      objectUrl: pigeonMap['objectUrl']! as String,
    );
  }
}

class _ObsClientAPICodec extends StandardMessageCodec {
  const _ObsClientAPICodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is ObsRequest) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else 
    if (value is ObsResponse) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else 
{
      super.writeValue(buffer, value);
    }
  }
  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:       
        return ObsRequest.decode(readValue(buffer)!);
      
      case 129:       
        return ObsResponse.decode(readValue(buffer)!);
      
      default:      
        return super.readValueOfType(type, buffer);
      
    }
  }
}

class ObsClientAPI {
  /// Constructor for [ObsClientAPI].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  ObsClientAPI({BinaryMessenger? binaryMessenger}) : _binaryMessenger = binaryMessenger;

  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _ObsClientAPICodec();

  Future<ObsResponse> uploadFile(ObsRequest arg_request) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ObsClientAPI.uploadFile', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_request]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as ObsResponse?)!;
    }
  }
}
